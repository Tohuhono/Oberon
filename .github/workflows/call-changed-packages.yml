# Turbo dry run to determine which apps have changed between the latest commit and target or previous commit
name: "Changed packages"

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      ref:
        required: true
        type: string
      base:
        required: true
        type: string
    outputs:
      changed_packages:
        description: "Stringified JSON array of changed packages in this changeset"
        value: ${{ jobs.dry-run.outputs.changed_packages }}
      # AS A CONVENIENCE: These two outputs are shorthand so consumer can just check boolean output for these specific packages
#      api_changed:
#        description: "Indicates if the api or its dependencies have changed"
#        value: ${{ jobs.dry-run.outputs.api_changed }}

jobs:
  dry-run:
    runs-on: ubuntu-latest
    env:
      # The turbo filter here varies depending on if we're using this workflow in a PR or on a push to a branch
      # For PRs, we want to use `github.event.pull_request.base.sha` to tell turbo to see which packages changed since that SHA
      # For a branch push/merges, the above sha isn't available, so instead, we reference `github.event.before` to determine the previous `HEAD` of the branch we just pushed onto
      #   See SO answer for more info https://stackoverflow.com/a/61861763/2379922
      TURBO_REF_FILTER: ${{ inputs.base }}
    outputs:
      # Defining a job output for used by the next jobs:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
      changed_packages: ${{ steps.output-changed-packages.outputs.changed_packages }}
    #      api_changed: ${{ steps.api-changed.outputs.result }}

    steps:
      - uses: actions/checkout@v4
        with:
          # see `fetch-depth` in README: https://github.com/actions/checkout#checkout-v3,
          # we set to `0` so the referenced commits are available for the command below
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Changeset
        id: changeset
        # 1. We need the 'output' of a turbo dry-run to get a json with all affected packages of these run.
        # 2. The multi line json string is wrapped in EOF delimeters to make the GHA happy: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        # 3. We specify the .github/ folder as a dependency here. Just to be safe, if workflows changed, we use that to mean everything has changes pending... to force redeploys
        run: |
          echo 'result<<CHANGESET_DELIMITER' >> $GITHUB_OUTPUT
          echo "$(sh ./scripts/changed.sh $TURBO_REF_FILTER)" >> $GITHUB_OUTPUT
          echo 'CHANGESET_DELIMITER' >> $GITHUB_OUTPUT

      - name: skip
        if: github.head_ref == 'changeset-release/main'
        run: |
          echo "Output empty package set"

      - name: Output changed packages
        id: output-changed-packages
        run: |
          echo 'changed_packages<<CHANGED_PACKAGES_DELIMITER' >> $GITHUB_OUTPUT
          echo "${{ github.head_ref == 'changeset-release/main' && '[]' || steps.changeset.outputs.result }}" >> $GITHUB_OUTPUT
          echo 'CHANGED_PACKAGES_DELIMITER' >> $GITHUB_OUTPUT

#      Boolean check for specific package sets
#      - name: Did the API or its dependencies change?
#        id: api-changed
# 1. Using the 'output' of the 'changeset' step inside the `if` to check if the specific app has changed
# 2. When `true`, we store it in the 'output' of the current step.
# NOTE: `api` is the name of my server package
#        if: ${{ contains(fromJSON(steps.changeset.outputs.result).packages, 'api') }}
#        run: echo "result=true" >> $GITHUB_OUTPUT
